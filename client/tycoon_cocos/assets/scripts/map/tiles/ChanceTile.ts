/**
 * 机会地块
 * 
 * 触发随机事件的特殊地块，玩家停留时可能获得卡片、金钱或其他特殊效果
 * 为游戏增加随机性和策略深度的重要地块类型
 * 
 * @author Web3 Tycoon Team
 * @version 1.0.0
 */

import { _decorator, Component } from 'cc';
import { MapTile, TileInteractionResult } from '../core/MapTile';
import { MapTileData, TileType } from '../types/MapTypes';
import { PlayerData, GameEventType } from '../types/GameTypes';
import { CardType, MVP_CARDS } from '../types/CardTypes';

const { ccclass, property } = _decorator;

/**
 * 机会事件类型枚举
 */
enum ChanceEventType {
    /** 获得金钱 */
    GAIN_MONEY = 'gain_money',
    /** 失去金钱 */
    LOSE_MONEY = 'lose_money',
    /** 获得卡片 */
    GAIN_CARD = 'gain_card',
    /** 移动到指定位置 */
    MOVE_TO = 'move_to',\n    /** 获得免费建筑 */\n    FREE_BUILDING = 'free_building',\n    /** 免费经过起点 */\n    FREE_START_PASS = 'free_start_pass',\n    /** 随机传送 */\n    RANDOM_TELEPORT = 'random_teleport'\n}\n\n/**\n * 机会事件配置接口\n */\ninterface ChanceEvent {\n    /** 事件ID */\n    id: string;\n    /** 事件类型 */\n    type: ChanceEventType;\n    /** 事件名称 */\n    name: string;\n    /** 事件描述 */\n    description: string;\n    /** 触发权重（影响随机概率） */\n    weight: number;\n    /** 事件参数 */\n    parameters: { [key: string]: any };\n    /** 是否是正面事件 */\n    isPositive: boolean;\n}\n\n/**\n * 机会地块实现类\n * 提供随机事件触发和卡片获得功能\n */\n@ccclass('ChanceTile')\nexport class ChanceTile extends MapTile {\n    \n    // ========================= 编辑器属性 =========================\n    \n    @property({ displayName: \"卡片获得概率\", range: [0, 1], tooltip: \"玩家停留时获得卡片的概率\" })\n    public cardDropRate: number = 0.3;\n    \n    @property({ displayName: \"金钱事件概率\", range: [0, 1], tooltip: \"触发金钱相关事件的概率\" })\n    public moneyEventRate: number = 0.5;\n    \n    @property({ displayName: \"特殊事件概率\", range: [0, 1], tooltip: \"触发特殊事件的概率\" })\n    public specialEventRate: number = 0.2;\n    \n    @property({ displayName: \"显示事件动画\", tooltip: \"是否显示事件触发动画\" })\n    public showEventAnimation: boolean = true;\n    \n    @property({ displayName: \"事件音效\", tooltip: \"触发事件时播放的音效\" })\n    public eventAudioName: string = 'chance_event';\n    \n    // ========================= 私有属性 =========================\n    \n    /** 机会事件列表 */\n    private _chanceEvents: ChanceEvent[] = [];\n    \n    /** 事件触发历史 */\n    private _eventHistory: { playerId: string; eventId: string; timestamp: number }[] = [];\n    \n    // ========================= 抽象方法实现 =========================\n    \n    /**\n     * 获取地块类型\n     */\n    public get tileType(): TileType {\n        return TileType.CHANCE;\n    }\n    \n    /**\n     * 地块初始化\n     * @param tileData 地块数据\n     */\n    protected onTileInitialized(tileData: MapTileData): void {\n        // 初始化机会事件列表\n        this.initializeChanceEvents();\n        \n        // 从地块数据中读取事件权重配置\n        if (tileData.eventWeight) {\n            this.adjustEventWeights(tileData.eventWeight);\n        }\n        \n        console.log(`[ChanceTile] 机会地块初始化完成: ${this.tileName}, 事件数量: ${this._chanceEvents.length}`);\n    }\n    \n    /**\n     * 玩家停留处理\n     * 触发随机机会事件\n     * @param player 停留的玩家\n     */\n    protected async onPlayerLandOn(player: PlayerData): Promise<TileInteractionResult> {\n        console.log(`[ChanceTile] 玩家 ${player.nickname} 停留在机会地块 ${this.tileName}`);\n        \n        // 播放特效动画\n        if (this.showEventAnimation) {\n            await this.playChanceAnimation();\n        }\n        \n        // 随机选择事件\n        const selectedEvent = this.selectRandomEvent();\n        if (!selectedEvent) {\n            return {\n                success: false,\n                message: '机会事件配置错误',\n                events: []\n            };\n        }\n        \n        // 执行事件\n        const result = await this.executeChanceEvent(player, selectedEvent);\n        \n        // 记录事件历史\n        this._eventHistory.push({\n            playerId: player.id,\n            eventId: selectedEvent.id,\n            timestamp: Date.now()\n        });\n        \n        return result;\n    }\n    \n    // ========================= 事件系统 =========================\n    \n    /**\n     * 初始化机会事件列表\n     */\n    private initializeChanceEvents(): void {\n        this._chanceEvents = [\n            // 金钱类事件\n            {\n                id: 'gain_money_small',\n                type: ChanceEventType.GAIN_MONEY,\n                name: '意外收获',\n                description: '你在路上发现了一些金钱',\n                weight: 15,\n                parameters: { amount: 50 },\n                isPositive: true\n            },\n            {\n                id: 'gain_money_medium',\n                type: ChanceEventType.GAIN_MONEY,\n                name: '投资回报',\n                description: '你的投资获得了不错的回报',\n                weight: 10,\n                parameters: { amount: 100 },\n                isPositive: true\n            },\n            {\n                id: 'lose_money_small',\n                type: ChanceEventType.LOSE_MONEY,\n                name: '意外支出',\n                description: '你需要支付一笔意外的费用',\n                weight: 12,\n                parameters: { amount: 30 },\n                isPositive: false\n            },\n            {\n                id: 'lose_money_tax',\n                type: ChanceEventType.LOSE_MONEY,\n                name: '税务检查',\n                description: '税务部门要求你补缴税款',\n                weight: 8,\n                parameters: { amount: 80 },\n                isPositive: false\n            },\n            \n            // 卡片类事件\n            {\n                id: 'gain_card_common',\n                type: ChanceEventType.GAIN_CARD,\n                name: '神秘礼物',\n                description: '你获得了一张神秘卡片',\n                weight: 20,\n                parameters: { cardRarity: 'common' },\n                isPositive: true\n            },\n            {\n                id: 'gain_card_rare',\n                type: ChanceEventType.GAIN_CARD,\n                name: '稀有发现',\n                description: '你获得了一张稀有卡片',\n                weight: 5,\n                parameters: { cardRarity: 'rare' },\n                isPositive: true\n            },\n            \n            // 移动类事件\n            {\n                id: 'move_to_start',\n                type: ChanceEventType.MOVE_TO,\n                name: '回到起点',\n                description: '直接移动到起点，获得薪水',\n                weight: 10,\n                parameters: { targetType: 'start' },\n                isPositive: true\n            },\n            {\n                id: 'random_teleport',\n                type: ChanceEventType.RANDOM_TELEPORT,\n                name: '随机传送',\n                description: '被随机传送到地图上的某个位置',\n                weight: 8,\n                parameters: {},\n                isPositive: true // 可能是正面也可能是负面\n            },\n            \n            // 特殊事件\n            {\n                id: 'free_start_pass',\n                type: ChanceEventType.FREE_START_PASS,\n                name: '快速通道',\n                description: '下次经过起点时获得双倍薪水',\n                weight: 7,\n                parameters: { multiplier: 2 },\n                isPositive: true\n            }\n        ];\n    }\n    \n    /**\n     * 调整事件权重\n     * @param weightMultiplier 权重倍数\n     */\n    private adjustEventWeights(weightMultiplier: number): void {\n        this._chanceEvents.forEach(event => {\n            event.weight = Math.floor(event.weight * weightMultiplier);\n        });\n    }\n    \n    /**\n     * 随机选择事件\n     */\n    private selectRandomEvent(): ChanceEvent | null {\n        if (this._chanceEvents.length === 0) {\n            return null;\n        }\n        \n        // 计算总权重\n        const totalWeight = this._chanceEvents.reduce((sum, event) => sum + event.weight, 0);\n        if (totalWeight === 0) {\n            return null;\n        }\n        \n        // 随机选择\n        let randomValue = Math.random() * totalWeight;\n        \n        for (const event of this._chanceEvents) {\n            randomValue -= event.weight;\n            if (randomValue <= 0) {\n                return event;\n            }\n        }\n        \n        // 备选：返回第一个事件\n        return this._chanceEvents[0];\n    }\n    \n    /**\n     * 执行机会事件\n     * @param player 触发事件的玩家\n     * @param event 要执行的事件\n     */\n    private async executeChanceEvent(player: PlayerData, event: ChanceEvent): Promise<TileInteractionResult> {\n        console.log(`[ChanceTile] 执行机会事件: ${event.name}`);\n        \n        switch (event.type) {\n            case ChanceEventType.GAIN_MONEY:\n                return await this.handleGainMoneyEvent(player, event);\n            \n            case ChanceEventType.LOSE_MONEY:\n                return await this.handleLoseMoneyEvent(player, event);\n            \n            case ChanceEventType.GAIN_CARD:\n                return await this.handleGainCardEvent(player, event);\n            \n            case ChanceEventType.MOVE_TO:\n                return await this.handleMoveToEvent(player, event);\n            \n            case ChanceEventType.RANDOM_TELEPORT:\n                return await this.handleRandomTeleportEvent(player, event);\n            \n            case ChanceEventType.FREE_START_PASS:\n                return await this.handleFreeStartPassEvent(player, event);\n            \n            default:\n                return {\n                    success: false,\n                    message: `未知的事件类型: ${event.type}`,\n                    events: []\n                };\n        }\n    }\n    \n    // ========================= 事件处理方法 =========================\n    \n    /**\n     * 处理获得金钱事件\n     */\n    private async handleGainMoneyEvent(player: PlayerData, event: ChanceEvent): Promise<TileInteractionResult> {\n        const amount = event.parameters.amount || 50;\n        \n        player.financialStatus.cash += amount;\n        player.financialStatus.income.other += amount;\n        \n        const gameEvent = {\n            eventId: `chance_gain_money_${Date.now()}`,\n            type: GameEventType.TURN_START, // 可以自定义为 CHANCE_EVENT\n            timestamp: Date.now(),\n            turnNumber: 0,\n            actorPlayerId: player.id,\n            affectedTileId: this.getTileData()?.id,\n            parameters: {\n                eventType: event.type,\n                eventName: event.name,\n                amount: amount\n            },\n            description: `${player.nickname} ${event.description}，获得 ${amount} 金币`,\n            result: { newBalance: player.financialStatus.cash }\n        };\n        \n        return {\n            success: true,\n            message: `${event.name}！${event.description}，获得 ${amount} 金币！`,\n            events: [gameEvent],\n            moneyChange: amount,\n            blockMovement: false\n        };\n    }\n    \n    /**\n     * 处理失去金钱事件\n     */\n    private async handleLoseMoneyEvent(player: PlayerData, event: ChanceEvent): Promise<TileInteractionResult> {\n        const amount = event.parameters.amount || 30;\n        const actualAmount = Math.min(amount, player.financialStatus.cash);\n        \n        player.financialStatus.cash -= actualAmount;\n        player.financialStatus.expenses.other += actualAmount;\n        \n        const gameEvent = {\n            eventId: `chance_lose_money_${Date.now()}`,\n            type: GameEventType.TURN_START,\n            timestamp: Date.now(),\n            turnNumber: 0,\n            actorPlayerId: player.id,\n            affectedTileId: this.getTileData()?.id,\n            parameters: {\n                eventType: event.type,\n                eventName: event.name,\n                amount: actualAmount\n            },\n            description: `${player.nickname} ${event.description}，失去 ${actualAmount} 金币`,\n            result: { newBalance: player.financialStatus.cash }\n        };\n        \n        return {\n            success: true,\n            message: `${event.name}！${event.description}，失去 ${actualAmount} 金币。`,\n            events: [gameEvent],\n            moneyChange: -actualAmount,\n            blockMovement: false\n        };\n    }\n    \n    /**\n     * 处理获得卡片事件\n     */\n    private async handleGainCardEvent(player: PlayerData, event: ChanceEvent): Promise<TileInteractionResult> {\n        // 检查手牌是否已满\n        if (player.hand.cards.length >= player.hand.maxHandSize) {\n            return {\n                success: false,\n                message: '手牌已满，无法获得新卡片',\n                events: [],\n                blockMovement: false\n            };\n        }\n        \n        // 根据稀有度随机选择卡片\n        const cardRarity = event.parameters.cardRarity || 'common';\n        const availableCards = MVP_CARDS.filter(card => \n            card.rarity.toString().toLowerCase() === cardRarity.toLowerCase()\n        );\n        \n        if (availableCards.length === 0) {\n            return {\n                success: false,\n                message: '没有可用的卡片',\n                events: [],\n                blockMovement: false\n            };\n        }\n        \n        // 随机选择一张卡片\n        const selectedCard = availableCards[Math.floor(Math.random() * availableCards.length)];\n        \n        // 创建卡片实例\n        const cardInstance = {\n            instanceId: `card_${Date.now()}_${Math.random()}`,\n            cardId: selectedCard.id,\n            ownerId: player.id,\n            state: 'available' as const,\n            acquiredAt: Date.now()\n        };\n        \n        // 添加到玩家手牌\n        player.hand.cards.push(cardInstance);\n        player.statistics.cardsAcquired++;\n        \n        const gameEvent = {\n            eventId: `chance_gain_card_${Date.now()}`,\n            type: GameEventType.CARD_ACQUISITION,\n            timestamp: Date.now(),\n            turnNumber: 0,\n            actorPlayerId: player.id,\n            affectedTileId: this.getTileData()?.id,\n            parameters: {\n                eventType: event.type,\n                eventName: event.name,\n                cardId: selectedCard.id,\n                cardName: selectedCard.name\n            },\n            description: `${player.nickname} ${event.description}，获得卡片：${selectedCard.name}`,\n            result: { cardCount: player.hand.cards.length }\n        };\n        \n        return {\n            success: true,\n            message: `${event.name}！${event.description}，获得卡片：${selectedCard.name}！`,\n            events: [gameEvent],\n            blockMovement: false\n        };\n    }\n    \n    /**\n     * 处理移动到指定位置事件\n     */\n    private async handleMoveToEvent(player: PlayerData, event: ChanceEvent): Promise<TileInteractionResult> {\n        const targetType = event.parameters.targetType;\n        \n        // TODO: 这里需要通过MapManager执行实际的移动\n        // 当前只是记录事件，实际移动需要在上层处理\n        \n        const gameEvent = {\n            eventId: `chance_move_to_${Date.now()}`,\n            type: GameEventType.PLAYER_MOVE,\n            timestamp: Date.now(),\n            turnNumber: 0,\n            actorPlayerId: player.id,\n            affectedTileId: this.getTileData()?.id,\n            parameters: {\n                eventType: event.type,\n                eventName: event.name,\n                targetType: targetType,\n                needMovement: true\n            },\n            description: `${player.nickname} ${event.description}`,\n            result: { movementRequired: true }\n        };\n        \n        return {\n            success: true,\n            message: `${event.name}！${event.description}！`,\n            events: [gameEvent],\n            blockMovement: true // 需要等待移动完成\n        };\n    }\n    \n    /**\n     * 处理随机传送事件\n     */\n    private async handleRandomTeleportEvent(player: PlayerData, event: ChanceEvent): Promise<TileInteractionResult> {\n        // TODO: 随机选择一个地块进行传送\n        \n        const gameEvent = {\n            eventId: `chance_teleport_${Date.now()}`,\n            type: GameEventType.PLAYER_MOVE,\n            timestamp: Date.now(),\n            turnNumber: 0,\n            actorPlayerId: player.id,\n            affectedTileId: this.getTileData()?.id,\n            parameters: {\n                eventType: event.type,\n                eventName: event.name,\n                isRandomTeleport: true\n            },\n            description: `${player.nickname} ${event.description}`,\n            result: { teleportRequired: true }\n        };\n        \n        return {\n            success: true,\n            message: `${event.name}！${event.description}！`,\n            events: [gameEvent],\n            blockMovement: true\n        };\n    }\n    \n    /**\n     * 处理免费经过起点事件\n     */\n    private async handleFreeStartPassEvent(player: PlayerData, event: ChanceEvent): Promise<TileInteractionResult> {\n        const multiplier = event.parameters.multiplier || 2;\n        \n        // 添加状态效果\n        const statusEffect = {\n            effectId: `free_start_pass_${Date.now()}`,\n            type: 'double_salary',\n            name: '双倍薪水',\n            description: `下次经过起点时获得 ${multiplier} 倍薪水`,\n            remainingTurns: -1, // 永久直到触发\n            parameters: { multiplier: multiplier },\n            source: 'chance_event',\n            iconPath: 'icons/double_salary'\n        };\n        \n        player.statusEffects.push(statusEffect);\n        \n        const gameEvent = {\n            eventId: `chance_free_start_${Date.now()}`,\n            type: GameEventType.TURN_START,\n            timestamp: Date.now(),\n            turnNumber: 0,\n            actorPlayerId: player.id,\n            affectedTileId: this.getTileData()?.id,\n            parameters: {\n                eventType: event.type,\n                eventName: event.name,\n                statusEffectId: statusEffect.effectId\n            },\n            description: `${player.nickname} ${event.description}`,\n            result: { statusAdded: statusEffect.type }\n        };\n        \n        return {\n            success: true,\n            message: `${event.name}！${event.description}！`,\n            events: [gameEvent],\n            blockMovement: false\n        };\n    }\n    \n    // ========================= 特效和动画 =========================\n    \n    /**\n     * 播放机会动画\n     */\n    private async playChanceAnimation(): Promise<void> {\n        console.log('[ChanceTile] 播放机会事件动画');\n        \n        // TODO: 实现机会事件的特效动画\n        // 可以包括：\n        // 1. 卡片翻转动画\n        // 2. 光效特效\n        // 3. 音效播放\n        // 4. UI提示动画\n        \n        return new Promise((resolve) => {\n            this.scheduleOnce(() => {\n                resolve();\n            }, 1.0); // 动画持续1秒\n        });\n    }\n    \n    // ========================= 公共方法 =========================\n    \n    /**\n     * 获取事件历史\n     * @param playerId 可选的玩家ID筛选\n     */\n    public getEventHistory(playerId?: string): { playerId: string; eventId: string; timestamp: number }[] {\n        if (playerId) {\n            return this._eventHistory.filter(record => record.playerId === playerId);\n        }\n        return [...this._eventHistory];\n    }\n    \n    /**\n     * 清除事件历史\n     */\n    public clearEventHistory(): void {\n        this._eventHistory = [];\n        console.log('[ChanceTile] 事件历史已清除');\n    }\n    \n    /**\n     * 获取可用事件列表\n     */\n    public getAvailableEvents(): ChanceEvent[] {\n        return [...this._chanceEvents];\n    }\n    \n    /**\n     * 添加自定义事件\n     * @param event 自定义事件\n     */\n    public addCustomEvent(event: ChanceEvent): void {\n        this._chanceEvents.push(event);\n        console.log(`[ChanceTile] 添加自定义事件: ${event.name}`);\n    }\n    \n    /**\n     * 获取地块统计信息\n     */\n    public getChanceStats(): {\n        totalEvents: number;\n        totalTriggers: number;\n        positiveEventCount: number;\n        negativeEventCount: number;\n        playerTriggerCounts: { [playerId: string]: number };\n    } {\n        const playerTriggerCounts: { [playerId: string]: number } = {};\n        \n        this._eventHistory.forEach(record => {\n            playerTriggerCounts[record.playerId] = (playerTriggerCounts[record.playerId] || 0) + 1;\n        });\n        \n        return {\n            totalEvents: this._chanceEvents.length,\n            totalTriggers: this._eventHistory.length,\n            positiveEventCount: this._chanceEvents.filter(e => e.isPositive).length,\n            negativeEventCount: this._chanceEvents.filter(e => !e.isPositive).length,\n            playerTriggerCounts: playerTriggerCounts\n        };\n    }\n}