[1,0,0,[["cc.EffectAsset",["_name","shaders","techniques"],0]],[[0,0,1,2,4]],[[0,"../resources/voxel/shaders/voxel-emissive",[{"hash":48360779,"name":"../resources/voxel/shaders/voxel-emissive|voxel-emissive-vs|voxel-emissive-fs","blocks":[{"name":"EmissiveVSUniforms","stageFlags":1,"binding":0,"members":[{"name":"timer","type":13,"count":1},{"name":"daylight","type":13,"count":1},{"name":"fogDistance","type":13,"count":1},{"name":"ortho","type":13,"count":1},{"name":"flickerSpeed","type":13,"count":1},{"name":"flickerAmount","type":13,"count":1}],"defines":[]},{"name":"EmissiveFSUniforms","stageFlags":16,"binding":1,"members":[{"name":"emissiveColor","type":16,"count":1},{"name":"emissiveIntensity","type":13,"count":1},{"name":"bloomIntensity","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"sampleType":0,"binding":2,"defines":[]},{"name":"skyTexture","type":28,"count":1,"stageFlags":16,"sampleType":0,"binding":3,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_texCoord1","format":21,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]}],"fragColors":[{"name":"fragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"EmissiveVSUniforms","stageFlags":1,"binding":0,"members":[{"name":"timer","type":13,"count":1},{"name":"daylight","type":13,"count":1},{"name":"fogDistance","type":13,"count":1},{"name":"ortho","type":13,"count":1},{"name":"flickerSpeed","type":13,"count":1},{"name":"flickerAmount","type":13,"count":1}],"defines":[]},{"name":"EmissiveFSUniforms","stageFlags":16,"binding":1,"members":[{"name":"emissiveColor","type":16,"count":1},{"name":"emissiveIntensity","type":13,"count":1},{"name":"bloomIntensity","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"sampleType":0,"binding":2,"defines":[]},{"name":"skyTexture","type":28,"count":1,"stageFlags":16,"sampleType":0,"binding":3,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n  highp vec4 cc_reflectionProbeData1;\n  highp vec4 cc_reflectionProbeData2;\n  highp vec4 cc_reflectionProbeBlendData1;\n  highp vec4 cc_reflectionProbeBlendData2;\n};\nlayout(std140) uniform EmissiveVSUniforms {\n  float timer;\n  float daylight;\n  float fogDistance;\n  float ortho;\n  float flickerSpeed;\n  float flickerAmount;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec2 a_texCoord1;\nin vec4 a_color;\nout vec2 v_uv;\nout float v_ao;\nout float v_light;\nout float v_fogFactor;\nout float v_fogHeight;\nout float v_diffuse;\nout float v_flickerFactor;\nout float v_timer;\nout float v_daylight;\nconst float PI = 3.14159265;\nconst vec3 LIGHT_DIRECTION = normalize(vec3(-1.0, 1.0, -1.0));\nvoid main() {\n  vec4 worldPos = cc_matWorld * vec4(a_position, 1.0);\n  gl_Position = cc_matViewProj * worldPos;\n  v_uv = a_texCoord;\n  v_ao = 0.3 + (1.0 - a_color.r) * 0.7;\n  v_light = a_color.g;\n  v_timer = timer;\n  v_daylight = daylight;\n  vec3 worldNormal = normalize((cc_matWorld * vec4(a_normal, 0.0)).xyz);\n  v_diffuse = max(0.0, dot(worldNormal, LIGHT_DIRECTION));\n  if (flickerSpeed > 0.0) {\n    float flicker1 = sin(timer * flickerSpeed);\n    float flicker2 = sin(timer * flickerSpeed * 1.7 + 1.0);\n    float flicker3 = sin(timer * flickerSpeed * 2.3 + 2.0);\n    v_flickerFactor = 1.0 + (flicker1 + flicker2 * 0.5 + flicker3 * 0.3) * flickerAmount * 0.3;\n    v_flickerFactor = clamp(v_flickerFactor, 0.5, 1.5);\n  } else {\n    v_flickerFactor = 1.0;\n  }\n  if (ortho > 0.5) {\n    v_fogFactor = 0.0;\n    v_fogHeight = 0.0;\n  } else {\n    float cameraDistance = distance(cc_cameraPos.xyz, worldPos.xyz);\n    v_fogFactor = pow(clamp(cameraDistance / fogDistance, 0.0, 1.0), 6.0);\n    float dy = worldPos.y - cc_cameraPos.y;\n    float dx = distance(worldPos.xz, cc_cameraPos.xz);\n    v_fogHeight = (atan(dy, dx) + PI / 2.0) / PI;\n  }\n}","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nuniform sampler2D mainTexture;\nuniform sampler2D skyTexture;\nlayout(std140) uniform EmissiveFSUniforms {\n  vec4 emissiveColor;\n  float emissiveIntensity;\n  float bloomIntensity;\n};\nin vec2 v_uv;\nin float v_ao;\nin float v_light;\nin float v_fogFactor;\nin float v_fogHeight;\nin float v_diffuse;\nin float v_flickerFactor;\nin float v_timer;\nin float v_daylight;\nlayout(location = 0) out vec4 fragColor;\nvoid main() {\n  vec4 texColor = texture(mainTexture, v_uv);\n  if (all(equal(texColor.rgb, vec3(1.0, 0.0, 1.0)))) {\n    discard;\n  }\n  float ao = v_ao;\n  float df = v_diffuse * 0.3;\n  ao = min(1.0, ao + v_light);\n  df = min(1.0, df + v_light);\n  float lightValue = min(1.0, v_daylight + v_light);\n  vec3 ambient = vec3(lightValue * 0.1 + 0.1);\n  vec3 diffuseLight = vec3(lightValue * 0.1) * df;\n  vec3 baseColor = texColor.rgb * (ambient + diffuseLight) * ao;\n  vec3 emissive = texColor.rgb * emissiveColor.rgb * emissiveIntensity * v_flickerFactor;\n  vec3 finalColor = baseColor + emissive;\n  finalColor = clamp(finalColor, vec3(0.0), vec3(10.0));\n  vec3 skyColor = texture(skyTexture, vec2(v_timer, v_fogHeight)).rgb;\n  finalColor = mix(finalColor, skyColor, clamp(v_fogFactor * 0.3, 0.0, 1.0));\n  float brightness = dot(emissive, vec3(0.299, 0.587, 0.114)) * bloomIntensity;\n  brightness = clamp(brightness, 0.0, 1.0);\n  fragColor = vec4(finalColor, max(texColor.a, brightness));\n}"},"glsl1":{"vert":"\nprecision mediump float;\nuniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\n     uniform float timer;\n     uniform float daylight;\n     uniform float fogDistance;\n     uniform float ortho;\n     uniform float flickerSpeed;\n     uniform float flickerAmount;\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec2 a_texCoord1;\nattribute vec4 a_color;\nvarying vec2 v_uv;\nvarying float v_ao;\nvarying float v_light;\nvarying float v_fogFactor;\nvarying float v_fogHeight;\nvarying float v_diffuse;\nvarying float v_flickerFactor;\nvarying float v_timer;\nvarying float v_daylight;\nconst float PI = 3.14159265;\nconst vec3 LIGHT_DIRECTION = normalize(vec3(-1.0, 1.0, -1.0));\nvoid main() {\n  vec4 worldPos = cc_matWorld * vec4(a_position, 1.0);\n  gl_Position = cc_matViewProj * worldPos;\n  v_uv = a_texCoord;\n  v_ao = 0.3 + (1.0 - a_color.r) * 0.7;\n  v_light = a_color.g;\n  v_timer = timer;\n  v_daylight = daylight;\n  vec3 worldNormal = normalize((cc_matWorld * vec4(a_normal, 0.0)).xyz);\n  v_diffuse = max(0.0, dot(worldNormal, LIGHT_DIRECTION));\n  if (flickerSpeed > 0.0) {\n    float flicker1 = sin(timer * flickerSpeed);\n    float flicker2 = sin(timer * flickerSpeed * 1.7 + 1.0);\n    float flicker3 = sin(timer * flickerSpeed * 2.3 + 2.0);\n    v_flickerFactor = 1.0 + (flicker1 + flicker2 * 0.5 + flicker3 * 0.3) * flickerAmount * 0.3;\n    v_flickerFactor = clamp(v_flickerFactor, 0.5, 1.5);\n  } else {\n    v_flickerFactor = 1.0;\n  }\n  if (ortho > 0.5) {\n    v_fogFactor = 0.0;\n    v_fogHeight = 0.0;\n  } else {\n    float cameraDistance = distance(cc_cameraPos.xyz, worldPos.xyz);\n    v_fogFactor = pow(clamp(cameraDistance / fogDistance, 0.0, 1.0), 6.0);\n    float dy = worldPos.y - cc_cameraPos.y;\n    float dx = distance(worldPos.xz, cc_cameraPos.xz);\n    v_fogHeight = (atan(dy, dx) + PI / 2.0) / PI;\n  }\n}","frag":"\nprecision mediump float;\nuniform sampler2D mainTexture;\nuniform sampler2D skyTexture;\n   uniform vec4 emissiveColor;\n   uniform float emissiveIntensity;\n   uniform float bloomIntensity;\nvarying vec2 v_uv;\nvarying float v_ao;\nvarying float v_light;\nvarying float v_fogFactor;\nvarying float v_fogHeight;\nvarying float v_diffuse;\nvarying float v_flickerFactor;\nvarying float v_timer;\nvarying float v_daylight;\nvoid main() {\n  vec4 texColor = texture2D(mainTexture, v_uv);\n  if (all(equal(texColor.rgb, vec3(1.0, 0.0, 1.0)))) {\n    discard;\n  }\n  float ao = v_ao;\n  float df = v_diffuse * 0.3;\n  ao = min(1.0, ao + v_light);\n  df = min(1.0, df + v_light);\n  float lightValue = min(1.0, v_daylight + v_light);\n  vec3 ambient = vec3(lightValue * 0.1 + 0.1);\n  vec3 diffuseLight = vec3(lightValue * 0.1) * df;\n  vec3 baseColor = texColor.rgb * (ambient + diffuseLight) * ao;\n  vec3 emissive = texColor.rgb * emissiveColor.rgb * emissiveIntensity * v_flickerFactor;\n  vec3 finalColor = baseColor + emissive;\n  finalColor = clamp(finalColor, vec3(0.0), vec3(10.0));\n  vec3 skyColor = texture2D(skyTexture, vec2(v_timer, v_fogHeight)).rgb;\n  finalColor = mix(finalColor, skyColor, clamp(v_fogFactor * 0.3, 0.0, 1.0));\n  float brightness = dot(emissive, vec3(0.299, 0.587, 0.114)) * bloomIntensity;\n  brightness = clamp(brightness, 0.0, 1.0);\n  gl_FragColor = vec4(finalColor, max(texColor.a, brightness));\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":62,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":45}},"defines":[]}],[{"name":"emissive","passes":[{"program":"../resources/voxel/shaders/voxel-emissive|voxel-emissive-vs|voxel-emissive-fs","rasterizerState":{"cullMode":2},"depthStencilState":{"depthWrite":true,"depthFunc":1},"properties":{"mainTexture":{"value":"white","type":28},"skyTexture":{"value":"white","type":28},"timer":{"type":13,"value":[0]},"daylight":{"type":13,"value":[1]},"fogDistance":{"type":13,"value":[150]},"ortho":{"type":13,"value":[0]},"emissiveColor":{"type":16,"value":[1,0.8,0.3,1]},"emissiveIntensity":{"type":13,"value":[2]},"flickerSpeed":{"type":13,"value":[0]},"flickerAmount":{"type":13,"value":[0]},"bloomIntensity":{"type":13,"value":[1]}}}]}]]],0,0,[],[],[]]
