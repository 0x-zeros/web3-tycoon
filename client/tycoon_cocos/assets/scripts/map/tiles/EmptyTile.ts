/**
 * 空白地块
 * 
 * 不触发任何特殊事件的普通地块，主要用于路径连接和地图布局
 * 玩家停留或经过时不会有任何特殊效果，是最基础的地块类型
 * 
 * @author Web3 Tycoon Team
 * @version 1.0.0
 */

import { _decorator, Component } from 'cc';
import { MapTile, TileInteractionResult } from '../core/MapTile';
import { MapTileData, TileType } from '../types/MapTypes';
import { PlayerData } from '../types/GameTypes';

const { ccclass, property } = _decorator;

/**
 * 空白地块实现类
 * 提供最基础的地块功能，不含特殊逻辑
 */
@ccclass('EmptyTile')
export class EmptyTile extends MapTile {
    
    // ========================= 编辑器属性 =========================
    
    @property({ displayName: \"欢迎消息\", multiline: true, tooltip: \"玩家第一次停留时显示的消息\" })\n    public welcomeMessage: string = '这是一片安静的空地。';\n    \n    @property({ displayName: \"休息效果\", tooltip: \"是否提供休息恢复效果\" })\n    public providesRest: boolean = false;\n    \n    @property({ displayName: \"休息恢复量\", tooltip: \"休息时恢复的体力值（如果有体力系统）\" })\n    public restAmount: number = 0;\n    \n    @property({ displayName: \"显示路过统计\", tooltip: \"是否统计玩家路过次数\" })\n    public trackPassage: boolean = false;\n    \n    @property({ displayName: \"装饰主题\", tooltip: \"空地的装饰主题（如花园、广场等）\" })\n    public decorationTheme: string = 'default';\n    \n    // ========================= 私有属性 =========================\n    \n    /** 玩家访问统计 */\n    private _visitStats: Map<string, { landCount: number; passCount: number; lastVisit: number }> = new Map();\n    \n    /** 是否显示过欢迎消息 */\n    private _hasShownWelcome: boolean = false;\n    \n    // ========================= 抽象方法实现 =========================\n    \n    /**\n     * 获取地块类型\n     */\n    public get tileType(): TileType {\n        return TileType.EMPTY;\n    }\n    \n    /**\n     * 地块初始化\n     * @param tileData 地块数据\n     */\n    protected onTileInitialized(tileData: MapTileData): void {\n        // 空白地块的初始化很简单，主要是设置基础属性\n        \n        // 如果没有设置名称，使用默认名称\n        if (!this.tileName || this.tileName.trim() === '') {\n            this.tileName = this.generateDefaultName();\n        }\n        \n        // 如果没有设置描述，使用默认描述\n        if (!this.description || this.description.trim() === '') {\n            this.description = this.generateDefaultDescription();\n        }\n        \n        // 根据装饰主题设置外观\n        this.applyDecorationTheme();\n        \n        console.log(`[EmptyTile] 空白地块初始化完成: ${this.tileName} (${this.decorationTheme})`);\n    }\n    \n    /**\n     * 玩家停留处理\n     * 空白地块通常不做特殊处理，但可以提供休息效果或显示信息\n     * @param player 停留的玩家\n     */\n    protected async onPlayerLandOn(player: PlayerData): Promise<TileInteractionResult> {\n        console.log(`[EmptyTile] 玩家 ${player.nickname} 停留在空白地块 ${this.tileName}`);\n        \n        // 更新访问统计\n        this.updateVisitStats(player.id, 'land');\n        \n        // 构建消息\n        let message = this.welcomeMessage;\n        let moneyChange = 0;\n        const events = [];\n        \n        // 首次访问显示欢迎消息\n        if (!this._hasShownWelcome) {\n            this._hasShownWelcome = true;\n            message = `欢迎来到 ${this.tileName}！${this.welcomeMessage}`;\n        }\n        \n        // 提供休息效果\n        if (this.providesRest && this.restAmount > 0) {\n            // 这里可以恢复玩家的体力值或提供小额金钱奖励\n            const restBonus = Math.floor(this.restAmount);\n            if (restBonus > 0) {\n                player.financialStatus.cash += restBonus;\n                player.financialStatus.income.other += restBonus;\n                moneyChange = restBonus;\n                message += ` 你在这里得到了充分的休息，获得 ${restBonus} 金币的小费。`;\n            }\n        }\n        \n        // 添加统计信息（如果启用）\n        if (this.trackPassage) {\n            const stats = this._visitStats.get(player.id);\n            if (stats) {\n                message += ` (你是第 ${stats.landCount} 次停留在这里)`;\n            }\n        }\n        \n        // 根据装饰主题添加特殊描述\n        const themeMessage = this.getThemeMessage();\n        if (themeMessage) {\n            message += ` ${themeMessage}`;\n        }\n        \n        return {\n            success: true,\n            message: message,\n            events: events,\n            moneyChange: moneyChange,\n            blockMovement: false\n        };\n    }\n    \n    /**\n     * 玩家经过处理\n     * 记录经过统计，一般不做其他处理\n     * @param player 经过的玩家\n     */\n    protected async onPlayerPassThrough(player: PlayerData): Promise<TileInteractionResult> {\n        console.log(`[EmptyTile] 玩家 ${player.nickname} 经过空白地块 ${this.tileName}`);\n        \n        // 更新访问统计\n        if (this.trackPassage) {\n            this.updateVisitStats(player.id, 'pass');\n        }\n        \n        return {\n            success: true,\n            message: `经过 ${this.tileName}`,\n            events: [],\n            moneyChange: 0,\n            blockMovement: false\n        };\n    }\n    \n    // ========================= 私有方法 =========================\n    \n    /**\n     * 生成默认名称\n     */\n    private generateDefaultName(): string {\n        const defaultNames = [\n            '空地', '休息区', '小广场', '绿地', '停车场',\n            '公园', '花园', '空旷地', '安全区', '中转站'\n        ];\n        \n        return defaultNames[Math.floor(Math.random() * defaultNames.length)];\n    }\n    \n    /**\n     * 生成默认描述\n     */\n    private generateDefaultDescription(): string {\n        const descriptions = [\n            '一片宁静的空地，什么也没有发生。',\n            '这里很安全，是个休息的好地方。',\n            '一个普通的地方，没有什么特别的。',\n            '微风轻拂，这里很舒服。',\n            '这里可以稍作停留。'\n        ];\n        \n        return descriptions[Math.floor(Math.random() * descriptions.length)];\n    }\n    \n    /**\n     * 应用装饰主题\n     */\n    private applyDecorationTheme(): void {\n        // 根据装饰主题调整地块的视觉外观\n        // TODO: 这里可以设置不同的材质、颜色、装饰物等\n        \n        switch (this.decorationTheme) {\n            case 'garden':\n                // 花园主题：绿色调，可能有花朵装饰\n                this.baseColor.set(120, 200, 120, 255);\n                break;\n            case 'plaza':\n                // 广场主题：石灰色调\n                this.baseColor.set(180, 180, 180, 255);\n                break;\n            case 'park':\n                // 公园主题：自然绿色\n                this.baseColor.set(100, 180, 100, 255);\n                break;\n            case 'beach':\n                // 海滩主题：沙色\n                this.baseColor.set(240, 220, 160, 255);\n                break;\n            default:\n                // 默认主题：保持原色\n                break;\n        }\n        \n        console.log(`[EmptyTile] 应用装饰主题: ${this.decorationTheme}`);\n    }\n    \n    /**\n     * 获取主题相关消息\n     */\n    private getThemeMessage(): string {\n        switch (this.decorationTheme) {\n            case 'garden':\n                return '花香阵阵，心情愉悦。';\n            case 'plaza':\n                return '宽阔的广场让人心胸开阔。';\n            case 'park':\n                return '绿树成荫，鸟语花香。';\n            case 'beach':\n                return '海风轻拂，浪花朵朵。';\n            default:\n                return '';\n        }\n    }\n    \n    /**\n     * 更新访问统计\n     * @param playerId 玩家ID\n     * @param type 访问类型\n     */\n    private updateVisitStats(playerId: string, type: 'land' | 'pass'): void {\n        let stats = this._visitStats.get(playerId);\n        \n        if (!stats) {\n            stats = { landCount: 0, passCount: 0, lastVisit: 0 };\n            this._visitStats.set(playerId, stats);\n        }\n        \n        if (type === 'land') {\n            stats.landCount++;\n        } else {\n            stats.passCount++;\n        }\n        \n        stats.lastVisit = Date.now();\n    }\n    \n    // ========================= 公共方法 =========================\n    \n    /**\n     * 设置装饰主题\n     * @param theme 主题名称\n     */\n    public setDecorationTheme(theme: string): void {\n        this.decorationTheme = theme;\n        this.applyDecorationTheme();\n        \n        // 更新描述\n        this.description = this.generateDefaultDescription();\n        \n        console.log(`[EmptyTile] 装饰主题已更改为: ${theme}`);\n    }\n    \n    /**\n     * 获取访问统计\n     * @param playerId 可选的玩家ID筛选\n     */\n    public getVisitStats(playerId?: string): any {\n        if (playerId) {\n            return this._visitStats.get(playerId) || { landCount: 0, passCount: 0, lastVisit: 0 };\n        }\n        \n        // 返回所有玩家的统计\n        const allStats: { [playerId: string]: any } = {};\n        this._visitStats.forEach((stats, pid) => {\n            allStats[pid] = { ...stats };\n        });\n        \n        return allStats;\n    }\n    \n    /**\n     * 重置访问统计\n     */\n    public resetVisitStats(): void {\n        this._visitStats.clear();\n        this._hasShownWelcome = false;\n        console.log('[EmptyTile] 访问统计已重置');\n    }\n    \n    /**\n     * 获取地块统计摘要\n     */\n    public getStatsSummary(): {\n        totalPlayers: number;\n        totalLandings: number;\n        totalPassages: number;\n        mostActivePlayer: string | null;\n    } {\n        let totalLandings = 0;\n        let totalPassages = 0;\n        let mostActivePlayer: string | null = null;\n        let maxActivity = 0;\n        \n        this._visitStats.forEach((stats, playerId) => {\n            totalLandings += stats.landCount;\n            totalPassages += stats.passCount;\n            \n            const activity = stats.landCount + stats.passCount;\n            if (activity > maxActivity) {\n                maxActivity = activity;\n                mostActivePlayer = playerId;\n            }\n        });\n        \n        return {\n            totalPlayers: this._visitStats.size,\n            totalLandings,\n            totalPassages,\n            mostActivePlayer\n        };\n    }\n    \n    /**\n     * 检查是否是安全地块\n     * 空白地块通常被认为是安全的\n     */\n    public isSafeTile(): boolean {\n        return true;\n    }\n    \n    /**\n     * 检查是否适合休息\n     */\n    public isRestTile(): boolean {\n        return this.providesRest;\n    }\n    \n    /**\n     * 设置休息效果\n     * @param enabled 是否启用休息效果\n     * @param amount 休息恢复量\n     */\n    public setRestEffect(enabled: boolean, amount: number = 0): void {\n        this.providesRest = enabled;\n        this.restAmount = amount;\n        \n        console.log(`[EmptyTile] 休息效果设置: ${enabled ? '启用' : '禁用'}, 恢复量: ${amount}`);\n    }\n    \n    /**\n     * 获取地块特色描述（用于UI显示）\n     */\n    public getFeatureDescription(): string {\n        const features: string[] = [];\n        \n        if (this.providesRest) {\n            features.push('可休息');\n        }\n        \n        if (this.trackPassage) {\n            features.push('统计访问');\n        }\n        \n        if (this.decorationTheme !== 'default') {\n            features.push(`${this.decorationTheme}主题`);\n        }\n        \n        if (features.length === 0) {\n            return '普通空地';\n        }\n        \n        return features.join('、');\n    }\n}