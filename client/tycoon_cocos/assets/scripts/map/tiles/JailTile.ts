/**
 * 监狱地块
 * 
 * 限制玩家行动的特殊地块，玩家可能被关押在此
 * 提供多种出狱方式：支付罚金、掷双数、使用越狱卡等
 * 
 * @author Web3 Tycoon Team
 * @version 1.0.0
 */

import { _decorator, Component } from 'cc';
import { MapTile, TileInteractionResult } from '../core/MapTile';
import { MapTileData, TileType } from '../types/MapTypes';
import { PlayerData, GameEventType, PlayerState } from '../types/GameTypes';

const { ccclass, property } = _decorator;

/**
 * 出狱方式枚举
 */
enum JailExitMethod {\n    /** 支付罚金 */\n    PAY_FINE = 'pay_fine',\n    /** 掷出双数 */\n    ROLL_DOUBLES = 'roll_doubles',\n    /** 使用越狱卡 */\n    USE_CARD = 'use_card',\n    /** 服刑期满 */\n    SERVE_TIME = 'serve_time',\n    /** 被保释 */\n    BAIL_OUT = 'bail_out'\n}\n\n/**\n * 监狱状态接口\n */\ninterface JailStatus {\n    /** 是否在监狱中 */\n    isInJail: boolean;\n    /** 入狱时间 */\n    jailTime: number;\n    /** 剩余刑期（回合数） */\n    remainingTurns: number;\n    /** 入狱原因 */\n    jailReason: string;\n    /** 尝试出狱的次数 */\n    escapeAttempts: number;\n}\n\n/**\n * 监狱地块实现类\n * 提供完整的监狱系统功能\n */\n@ccclass('JailTile')\nexport class JailTile extends MapTile {\n    \n    // ========================= 编辑器属性 =========================\n    \n    @property({ displayName: \"罚金金额\", tooltip: \"支付出狱的罚金金额\" })\n    public bailAmount: number = 50;\n    \n    @property({ displayName: \"最大刑期\", tooltip: \"最大监禁回合数\" })\n    public maxJailTurns: number = 3;\n    \n    @property({ displayName: \"允许支付出狱\", tooltip: \"是否允许玩家支付罚金出狱\" })\n    public allowPayBail: boolean = true;\n    \n    @property({ displayName: \"允许掷骰出狱\", tooltip: \"是否允许掷双数出狱\" })\n    public allowRollEscape: boolean = true;\n    \n    @property({ displayName: \"允许卡片出狱\", tooltip: \"是否允许使用越狱卡出狱\" })\n    public allowCardEscape: boolean = true;\n    \n    @property({ displayName: \"严厉模式\", tooltip: \"严厉模式下更难出狱\" })\n    public strictMode: boolean = false;\n    \n    @property({ displayName: \"监狱容量\", tooltip: \"最大可容纳的囚犯数量\" })\n    public jailCapacity: number = 4;\n    \n    @property({ displayName: \"显示监狱状态\", tooltip: \"是否显示监狱状态UI\" })\n    public showJailStatus: boolean = true;\n    \n    // ========================= 私有属性 =========================\n    \n    /** 当前囚犯列表 */\n    private _prisoners: Map<string, JailStatus> = new Map();\n    \n    /** 监狱历史记录 */\n    private _jailHistory: { \n        playerId: string; \n        action: string; \n        timestamp: number; \n        details: any \n    }[] = [];\n    \n    /** 监狱事件统计 */\n    private _jailStats = {\n        totalImprisonments: 0,\n        totalEscapes: 0,\n        averageJailTime: 0,\n        mostCommonEscapeMethod: JailExitMethod.SERVE_TIME\n    };\n    \n    // ========================= 抽象方法实现 =========================\n    \n    /**\n     * 获取地块类型\n     */\n    public get tileType(): TileType {\n        return TileType.JAIL;\n    }\n    \n    /**\n     * 地块初始化\n     * @param tileData 地块数据\n     */\n    protected onTileInitialized(tileData: MapTileData): void {\n        // 从地块数据中读取监狱配置\n        if (tileData.customData) {\n            this.bailAmount = tileData.customData.bailAmount || this.bailAmount;\n            this.maxJailTurns = tileData.customData.maxJailTurns || this.maxJailTurns;\n            this.strictMode = tileData.customData.strictMode || this.strictMode;\n        }\n        \n        // 设置监狱地块的视觉表现\n        this.setupJailAppearance();\n        \n        console.log(`[JailTile] 监狱地块初始化完成: ${this.tileName}, 罚金: ${this.bailAmount}, 最大刑期: ${this.maxJailTurns}`);\n    }\n    \n    /**\n     * 玩家停留处理\n     * 根据玩家状态处理入狱或探监逻辑\n     * @param player 停留的玩家\n     */\n    protected async onPlayerLandOn(player: PlayerData): Promise<TileInteractionResult> {\n        console.log(`[JailTile] 玩家 ${player.nickname} 停留在监狱地块`);\n        \n        // 检查玩家是否已经在监狱中\n        if (player.state === PlayerState.IN_JAIL || this._prisoners.has(player.id)) {\n            // 已在监狱中，处理出狱尝试\n            return await this.handleJailTurn(player);\n        } else {\n            // 只是路过监狱，不会被关押（除非是被送进来的）\n            return await this.handleJailVisit(player);\n        }\n    }\n    \n    /**\n     * 玩家经过处理\n     * 经过监狱一般不会有特殊效果\n     * @param player 经过的玩家\n     */\n    protected async onPlayerPassThrough(player: PlayerData): Promise<TileInteractionResult> {\n        console.log(`[JailTile] 玩家 ${player.nickname} 经过监狱地块`);\n        \n        return {\n            success: true,\n            message: `经过 ${this.tileName}，还好没被抓进去！`,\n            events: [],\n            blockMovement: false\n        };\n    }\n    \n    // ========================= 监狱逻辑处理 =========================\n    \n    /**\n     * 处理监狱回合（玩家在监狱中的行动）\n     * @param player 在监狱中的玩家\n     */\n    private async handleJailTurn(player: PlayerData): Promise<TileInteractionResult> {\n        const jailStatus = this._prisoners.get(player.id);\n        if (!jailStatus) {\n            // 数据不一致，重新设置监狱状态\n            return await this.imprisonPlayer(player, '数据修复', 1);\n        }\n        \n        console.log(`[JailTile] 处理玩家 ${player.nickname} 的监狱回合，剩余: ${jailStatus.remainingTurns} 回合`);\n        \n        // 减少剩余刑期\n        jailStatus.remainingTurns--;\n        \n        // 检查是否刑期已满\n        if (jailStatus.remainingTurns <= 0) {\n            return await this.releasePlayer(player, JailExitMethod.SERVE_TIME);\n        }\n        \n        // 提供出狱选项\n        const availableOptions = this.getAvailableEscapeOptions(player);\n        \n        return {\n            success: true,\n            message: this.getJailTurnMessage(player, jailStatus, availableOptions),\n            needUserInput: availableOptions.length > 0,\n            events: [],\n            blockMovement: true // 在监狱中无法移动\n        };\n    }\n    \n    /**\n     * 处理玩家访问监狱（不是囚犯）\n     * @param player 访问监狱的玩家\n     */\n    private async handleJailVisit(player: PlayerData): Promise<TileInteractionResult> {\n        const prisonerCount = this._prisoners.size;\n        \n        let message = `你来到了 ${this.tileName}。`;\n        \n        if (prisonerCount > 0) {\n            const prisonerNames = Array.from(this._prisoners.keys())\n                .map(id => this.getPlayerName(id))\n                .join('、');\n            message += ` 目前关押着 ${prisonerCount} 名囚犯：${prisonerNames}。`;\n        } else {\n            message += ` 监狱目前没有关押任何人。`;\n        }\n        \n        // 可能的探监或保释选项\n        const canBailSomeone = prisonerCount > 0 && player.financialStatus.cash >= this.bailAmount;\n        \n        return {\n            success: true,\n            message: message,\n            needUserInput: canBailSomeone,\n            events: [],\n            blockMovement: false\n        };\n    }\n    \n    /**\n     * 关押玩家\n     * @param player 要关押的玩家\n     * @param reason 入狱原因\n     * @param turns 刑期（回合数）\n     */\n    public async imprisonPlayer(player: PlayerData, reason: string, turns?: number): Promise<TileInteractionResult> {\n        // 检查监狱容量\n        if (this._prisoners.size >= this.jailCapacity) {\n            return {\n                success: false,\n                message: `监狱已满，无法关押更多囚犯`,\n                events: []\n            };\n        }\n        \n        const jailTurns = turns || this.maxJailTurns;\n        \n        // 创建监狱状态\n        const jailStatus: JailStatus = {\n            isInJail: true,\n            jailTime: Date.now(),\n            remainingTurns: jailTurns,\n            jailReason: reason,\n            escapeAttempts: 0\n        };\n        \n        // 更新玩家状态\n        player.state = PlayerState.IN_JAIL;\n        player.isInJail = true;\n        player.jailTurnsRemaining = jailTurns;\n        player.statistics.jailCount++;\n        \n        // 添加到囚犯列表\n        this._prisoners.set(player.id, jailStatus);\n        \n        // 更新统计\n        this._jailStats.totalImprisonments++;\n        \n        // 记录历史\n        this._jailHistory.push({\n            playerId: player.id,\n            action: 'imprison',\n            timestamp: Date.now(),\n            details: { reason, turns: jailTurns }\n        });\n        \n        // 触发入狱特效\n        if (this.showJailStatus) {\n            await this.playImprisonmentEffect(player);\n        }\n        \n        const events = [{\n            eventId: `jail_imprison_${Date.now()}`,\n            type: GameEventType.TURN_START, // 可以自定义为 JAIL_EVENT\n            timestamp: Date.now(),\n            turnNumber: 0,\n            actorPlayerId: player.id,\n            affectedTileId: this.getTileData()?.id,\n            parameters: {\n                action: 'imprison',\n                reason: reason,\n                jailTurns: jailTurns\n            },\n            description: `${player.nickname} 因 ${reason} 被关进监狱 ${jailTurns} 回合`,\n            result: { jailStatus: 'imprisoned' }\n        }];\n        \n        console.log(`[JailTile] 玩家 ${player.nickname} 被关押，原因: ${reason}, 刑期: ${jailTurns} 回合`);\n        \n        return {\n            success: true,\n            message: `你因 ${reason} 被关进了监狱！刑期 ${jailTurns} 回合。`,\n            events: events,\n            blockMovement: true\n        };\n    }\n    \n    /**\n     * 释放玩家\n     * @param player 要释放的玩家\n     * @param method 出狱方式\n     */\n    public async releasePlayer(player: PlayerData, method: JailExitMethod): Promise<TileInteractionResult> {\n        const jailStatus = this._prisoners.get(player.id);\n        if (!jailStatus) {\n            return {\n                success: false,\n                message: '玩家不在监狱中',\n                events: []\n            };\n        }\n        \n        // 计算监禁时长\n        const jailDuration = Date.now() - jailStatus.jailTime;\n        \n        // 更新玩家状态\n        player.state = PlayerState.WAITING;\n        player.isInJail = false;\n        player.jailTurnsRemaining = 0;\n        \n        // 从囚犯列表中移除\n        this._prisoners.delete(player.id);\n        \n        // 更新统计\n        this._jailStats.totalEscapes++;\n        this._jailStats.averageJailTime = \n            (this._jailStats.averageJailTime * (this._jailStats.totalEscapes - 1) + jailDuration) / \n            this._jailStats.totalEscapes;\n        \n        // 记录历史\n        this._jailHistory.push({\n            playerId: player.id,\n            action: 'release',\n            timestamp: Date.now(),\n            details: { method, duration: jailDuration }\n        });\n        \n        // 根据出狱方式处理不同的后果\n        let message = '';\n        let moneyChange = 0;\n        \n        switch (method) {\n            case JailExitMethod.PAY_FINE:\n                if (player.financialStatus.cash >= this.bailAmount) {\n                    player.financialStatus.cash -= this.bailAmount;\n                    player.financialStatus.expenses.other += this.bailAmount;\n                    moneyChange = -this.bailAmount;\n                    message = `支付 ${this.bailAmount} 金币罚金后获释！`;\n                } else {\n                    return {\n                        success: false,\n                        message: `罚金不足！需要 ${this.bailAmount} 金币`,\n                        events: []\n                    };\n                }\n                break;\n            \n            case JailExitMethod.ROLL_DOUBLES:\n                message = '恭喜！掷出双数，成功越狱！';\n                break;\n            \n            case JailExitMethod.USE_CARD:\n                message = '使用越狱卡成功脱身！';\n                // TODO: 消耗越狱卡\n                break;\n            \n            case JailExitMethod.SERVE_TIME:\n                message = '刑期已满，恢复自由！';\n                break;\n            \n            case JailExitMethod.BAIL_OUT:\n                message = '有人为你支付了保释金，你自由了！';\n                break;\n            \n            default:\n                message = '以未知方式获得了自由。';\n                break;\n        }\n        \n        // 播放释放特效\n        if (this.showJailStatus) {\n            await this.playReleaseEffect(player, method);\n        }\n        \n        const events = [{\n            eventId: `jail_release_${Date.now()}`,\n            type: GameEventType.TURN_START,\n            timestamp: Date.now(),\n            turnNumber: 0,\n            actorPlayerId: player.id,\n            affectedTileId: this.getTileData()?.id,\n            parameters: {\n                action: 'release',\n                method: method,\n                duration: jailDuration\n            },\n            description: `${player.nickname} 通过 ${method} 出狱`,\n            result: { jailStatus: 'released' }\n        }];\n        \n        console.log(`[JailTile] 玩家 ${player.nickname} 出狱，方式: ${method}`);\n        \n        return {\n            success: true,\n            message: message,\n            events: events,\n            moneyChange: moneyChange,\n            blockMovement: false\n        };\n    }\n    \n    // ========================= 辅助方法 =========================\n    \n    /**\n     * 获取可用的出狱选项\n     * @param player 玩家\n     */\n    private getAvailableEscapeOptions(player: PlayerData): JailExitMethod[] {\n        const options: JailExitMethod[] = [];\n        \n        // 支付罚金\n        if (this.allowPayBail && player.financialStatus.cash >= this.bailAmount) {\n            options.push(JailExitMethod.PAY_FINE);\n        }\n        \n        // 掷骰子（如果允许且还有机会）\n        const jailStatus = this._prisoners.get(player.id);\n        if (this.allowRollEscape && jailStatus && jailStatus.escapeAttempts < this.maxJailTurns) {\n            options.push(JailExitMethod.ROLL_DOUBLES);\n        }\n        \n        // 使用卡片\n        if (this.allowCardEscape && this.hasEscapeCard(player)) {\n            options.push(JailExitMethod.USE_CARD);\n        }\n        \n        return options;\n    }\n    \n    /**\n     * 检查玩家是否有越狱卡\n     * @param player 玩家\n     */\n    private hasEscapeCard(player: PlayerData): boolean {\n        // TODO: 检查玩家手牌中是否有越狱类型的卡片\n        // 这里需要与卡片系统集成\n        return player.hand.cards.some(card => \n            card.cardId.includes('escape') || \n            card.cardId.includes('jail') ||\n            card.cardId.includes('teleport')\n        );\n    }\n    \n    /**\n     * 生成监狱回合消息\n     */\n    private getJailTurnMessage(player: PlayerData, jailStatus: JailStatus, options: JailExitMethod[]): string {\n        let message = `你在监狱中度过了一个回合。剩余刑期：${jailStatus.remainingTurns} 回合。`;\n        \n        if (options.length > 0) {\n            message += ` 出狱选项：`;\n            \n            const optionMessages: string[] = [];\n            \n            if (options.includes(JailExitMethod.PAY_FINE)) {\n                optionMessages.push(`支付 ${this.bailAmount} 金币罚金`);\n            }\n            \n            if (options.includes(JailExitMethod.ROLL_DOUBLES)) {\n                optionMessages.push('尝试掷双数');\n            }\n            \n            if (options.includes(JailExitMethod.USE_CARD)) {\n                optionMessages.push('使用越狱卡');\n            }\n            \n            message += optionMessages.join('、');\n        } else {\n            message += ` 目前没有出狱选项，只能等待刑期结束。`;\n        }\n        \n        return message;\n    }\n    \n    /**\n     * 获取玩家名称（用于显示）\n     */\n    private getPlayerName(playerId: string): string {\n        // TODO: 通过GameManager获取玩家昵称\n        return `玩家${playerId}`;\n    }\n    \n    /**\n     * 设置监狱外观\n     */\n    private setupJailAppearance(): void {\n        // 监狱地块使用深灰色\n        this.baseColor.set(80, 80, 80, 255);\n        this.highlightColor.set(120, 120, 120, 255);\n        \n        // TODO: 可以添加监狱相关的3D装饰\n        // 比如铁栅栏、围墙等\n    }\n    \n    // ========================= 特效方法 =========================\n    \n    /**\n     * 播放入狱特效\n     */\n    private async playImprisonmentEffect(player: PlayerData): Promise<void> {\n        console.log(`[JailTile] 播放入狱特效: ${player.nickname}`);\n        \n        // TODO: 实现入狱特效\n        // 1. 暗化屏幕\n        // 2. 播放监狱门关闭音效\n        // 3. 显示入狱动画\n        \n        return new Promise((resolve) => {\n            this.scheduleOnce(() => {\n                resolve();\n            }, 1.5);\n        });\n    }\n    \n    /**\n     * 播放出狱特效\n     */\n    private async playReleaseEffect(player: PlayerData, method: JailExitMethod): Promise<void> {\n        console.log(`[JailTile] 播放出狱特效: ${player.nickname}, 方式: ${method}`);\n        \n        // TODO: 实现出狱特效\n        // 根据不同的出狱方式播放不同的特效\n        \n        return new Promise((resolve) => {\n            this.scheduleOnce(() => {\n                resolve();\n            }, 1.0);\n        });\n    }\n    \n    // ========================= 公共方法 =========================\n    \n    /**\n     * 检查玩家是否在监狱中\n     * @param playerId 玩家ID\n     */\n    public isPlayerInJail(playerId: string): boolean {\n        return this._prisoners.has(playerId);\n    }\n    \n    /**\n     * 获取监狱状态\n     * @param playerId 玩家ID\n     */\n    public getJailStatus(playerId: string): JailStatus | null {\n        return this._prisoners.get(playerId) || null;\n    }\n    \n    /**\n     * 获取所有囚犯列表\n     */\n    public getPrisoners(): string[] {\n        return Array.from(this._prisoners.keys());\n    }\n    \n    /**\n     * 获取监狱统计\n     */\n    public getJailStats(): {\n        currentPrisoners: number;\n        capacity: number;\n        totalImprisonments: number;\n        totalReleases: number;\n        averageJailTime: number;\n    } {\n        return {\n            currentPrisoners: this._prisoners.size,\n            capacity: this.jailCapacity,\n            totalImprisonments: this._jailStats.totalImprisonments,\n            totalReleases: this._jailStats.totalEscapes,\n            averageJailTime: this._jailStats.averageJailTime\n        };\n    }\n    \n    /**\n     * 清空监狱\n     * 释放所有囚犯（调试用）\n     */\n    public clearJail(): void {\n        this._prisoners.forEach((_, playerId) => {\n            // TODO: 需要获取玩家对象来更新状态\n            console.log(`[JailTile] 强制释放囚犯: ${playerId}`);\n        });\n        \n        this._prisoners.clear();\n        console.log('[JailTile] 监狱已清空');\n    }\n    \n    /**\n     * 设置监狱配置\n     */\n    public setJailConfig(config: {\n        bailAmount?: number;\n        maxJailTurns?: number;\n        jailCapacity?: number;\n        strictMode?: boolean;\n    }): void {\n        if (config.bailAmount !== undefined) this.bailAmount = config.bailAmount;\n        if (config.maxJailTurns !== undefined) this.maxJailTurns = config.maxJailTurns;\n        if (config.jailCapacity !== undefined) this.jailCapacity = config.jailCapacity;\n        if (config.strictMode !== undefined) this.strictMode = config.strictMode;\n        \n        console.log('[JailTile] 监狱配置已更新', config);\n    }\n    \n    /**\n     * 获取监狱历史记录\n     */\n    public getJailHistory(): typeof this._jailHistory {\n        return [...this._jailHistory];\n    }\n}