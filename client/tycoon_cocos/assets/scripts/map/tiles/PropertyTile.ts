/**
 * 地产地块
 * 
 * 可购买、建设、收租的地产地块，是大富翁游戏的核心地块类型
 * 支持购买、建设房屋、收取租金、抵押等完整的地产功能
 * 
 * @author Web3 Tycoon Team
 * @version 1.0.0
 */

import { _decorator, Component, Color, Node, Label, MeshRenderer } from 'cc';
import { MapTile, TileInteractionResult } from '../core/MapTile';
import { MapTileData, TileType, PropertyData, PropertyGroup } from '../types/MapTypes';
import { PlayerData, GameEventType } from '../types/GameTypes';

const { ccclass, property } = _decorator;

/**
 * 建筑类型枚举
 */\nenum BuildingType {\n    /** 空地 */\n    EMPTY = 0,\n    /** 房屋1-4级 */\n    HOUSE_1 = 1,\n    HOUSE_2 = 2,\n    HOUSE_3 = 3,\n    HOUSE_4 = 4,\n    /** 酒店 */\n    HOTEL = 5\n}\n\n/**\n * 地产交互选项\n */\ninterface PropertyInteractionOptions {\n    /** 是否可以购买 */\n    canPurchase: boolean;\n    /** 是否可以建设 */\n    canBuild: boolean;\n    /** 是否可以出售 */\n    canSell: boolean;\n    /** 是否可以抵押 */\n    canMortgage: boolean;\n    /** 是否需要支付租金 */\n    needPayRent: boolean;\n    /** 当前租金金额 */\n    currentRent: number;\n}\n\n/**\n * 地产地块实现类\n * 提供完整的地产购买、建设、租金收取功能\n */\n@ccclass('PropertyTile')\nexport class PropertyTile extends MapTile {\n    \n    // ========================= 编辑器属性 =========================\n    \n    @property({ displayName: \"地产价格\", tooltip: \"购买此地产的价格\" })\n    public purchasePrice: number = 100;\n    \n    @property({ displayName: \"基础租金\", tooltip: \"空地状态下的租金\" })\n    public baseRent: number = 10;\n    \n    @property({ displayName: \"建房费用\", tooltip: \"建设每栋房屋的费用\" })\n    public houseCost: number = 50;\n    \n    @property({ displayName: \"酒店费用\", tooltip: \"建设酒店的费用\" })\n    public hotelCost: number = 200;\n    \n    @property({ displayName: \"抵押价值\", tooltip: \"抵押时可获得的金额\" })\n    public mortgageValue: number = 50;\n    \n    @property({ displayName: \"地产组\", tooltip: \"所属的地产颜色组\" })\n    public propertyGroupName: string = 'brown';\n    \n    @property({ displayName: \"显示建筑\", tooltip: \"是否显示建筑物3D模型\" })\n    public showBuildings: boolean = true;\n    \n    @property({ displayName: \"建筑容器\", type: Node, tooltip: \"用于放置建筑模型的父节点\" })\n    public buildingsContainer: Node | null = null;\n    \n    @property({ displayName: \"价格标签\", type: Label, tooltip: \"显示地产价格的标签\" })\n    public priceLabel: Label | null = null;\n    \n    @property({ displayName: \"拥有者标签\", type: Label, tooltip: \"显示地产拥有者的标签\" })\n    public ownerLabel: Label | null = null;\n    \n    // ========================= 私有属性 =========================\n    \n    /** 地产数据 */\n    private _propertyData: PropertyData | null = null;\n    \n    /** 租金等级表 */\n    private _rentLevels: number[] = [];\n    \n    /** 建筑物节点列表 */\n    private _buildingNodes: Node[] = [];\n    \n    /** 是否正在交互中 */\n    private _isInteracting: boolean = false;\n    \n    // ========================= 抽象方法实现 =========================\n    \n    /**\n     * 获取地块类型\n     */\n    public get tileType(): TileType {\n        return TileType.PROPERTY;\n    }\n    \n    /**\n     * 地块初始化\n     * @param tileData 地块数据\n     */\n    protected onTileInitialized(tileData: MapTileData): void {\n        if (!tileData.propertyData) {\n            console.error('[PropertyTile] 地产地块缺少地产数据');\n            return;\n        }\n        \n        this._propertyData = tileData.propertyData;\n        \n        // 更新属性\n        this.purchasePrice = this._propertyData.price;\n        this.baseRent = this._propertyData.rent[0];\n        this.houseCost = this._propertyData.buildCost;\n        this.hotelCost = this._propertyData.hotelCost;\n        this._rentLevels = [...this._propertyData.rent];\n        \n        // 设置抵押价值为购买价格的一半\n        this.mortgageValue = Math.floor(this.purchasePrice * 0.5);\n        \n        // 初始化UI\n        this.updatePropertyUI();\n        \n        // 初始化建筑显示\n        this.updateBuildingDisplay();\n        \n        console.log(`[PropertyTile] 地产地块初始化完成: ${this.tileName}, 价格: ${this.purchasePrice}`);\n    }\n    \n    /**\n     * 玩家停留处理\n     * 根据地产状态处理购买、租金等逻辑\n     * @param player 停留的玩家\n     */\n    protected async onPlayerLandOn(player: PlayerData): Promise<TileInteractionResult> {\n        if (!this._propertyData || this._isInteracting) {\n            return {\n                success: false,\n                message: '地产数据错误或正在交互中',\n                events: []\n            };\n        }\n        \n        this._isInteracting = true;\n        \n        try {\n            console.log(`[PropertyTile] 玩家 ${player.nickname} 停留在地产 ${this.tileName}`);\n            \n            // 检查交互选项\n            const options = this.getInteractionOptions(player);\n            \n            if (options.needPayRent) {\n                // 需要支付租金\n                return await this.handleRentPayment(player, options.currentRent);\n            } else if (options.canPurchase) {\n                // 可以购买\n                return await this.handlePurchaseOption(player);\n            } else if (this._propertyData.ownerId === player.id) {\n                // 自己的地产，可以建设\n                return await this.handleOwnerOptions(player);\n            } else {\n                // 其他情况（如被抵押的地产）\n                return {\n                    success: true,\n                    message: `这是 ${this.getOwnerName()} 的地产，但目前被抵押中`,\n                    events: [],\n                    blockMovement: false\n                };\n            }\n        } finally {\n            this._isInteracting = false;\n        }\n    }\n    \n    // ========================= 地产交互处理 =========================\n    \n    /**\n     * 获取交互选项\n     * @param player 当前玩家\n     */\n    private getInteractionOptions(player: PlayerData): PropertyInteractionOptions {\n        if (!this._propertyData) {\n            return {\n                canPurchase: false,\n                canBuild: false,\n                canSell: false,\n                canMortgage: false,\n                needPayRent: false,\n                currentRent: 0\n            };\n        }\n        \n        const isOwner = this._propertyData.ownerId === player.id;\n        const isUnowned = this._propertyData.ownerId === null;\n        const isMortgaged = this._propertyData.isMortgaged;\n        \n        let currentRent = 0;\n        if (!isOwner && !isUnowned && !isMortgaged) {\n            currentRent = this.calculateCurrentRent();\n        }\n        \n        return {\n            canPurchase: isUnowned && player.financialStatus.cash >= this.purchasePrice,\n            canBuild: isOwner && !isMortgaged && this.canBuildMore(),\n            canSell: isOwner && this._propertyData.buildingLevel > 0,\n            canMortgage: isOwner && !isMortgaged && this._propertyData.buildingLevel === 0,\n            needPayRent: !isOwner && !isUnowned && !isMortgaged,\n            currentRent: currentRent\n        };\n    }\n    \n    /**\n     * 处理租金支付\n     * @param player 支付租金的玩家\n     * @param rentAmount 租金金额\n     */\n    private async handleRentPayment(player: PlayerData, rentAmount: number): Promise<TileInteractionResult> {\n        if (!this._propertyData) {\n            return { success: false, message: '地产数据错误', events: [] };\n        }\n        \n        // 检查玩家是否有免租卡效果\n        const hasFreeRentStatus = player.statusEffects.some(effect => \n            effect.type === 'free_rent' && effect.remainingTurns !== 0\n        );\n        \n        if (hasFreeRentStatus) {\n            // 消耗免租状态\n            this.consumeFreeRentStatus(player);\n            \n            return {\n                success: true,\n                message: `使用免租卡，免费通过 ${this.tileName}！`,\n                events: [{\n                    eventId: `rent_free_${Date.now()}`,\n                    type: GameEventType.CARD_USE,\n                    timestamp: Date.now(),\n                    turnNumber: 0,\n                    actorPlayerId: player.id,\n                    targetPlayerId: this._propertyData.ownerId!,\n                    affectedTileId: this._propertyData ? this.getTileData()?.id : undefined,\n                    parameters: { originalRent: rentAmount, cardType: 'free_rent' },\n                    description: `${player.nickname} 使用免租卡通过 ${this.tileName}`,\n                    result: { rentPaid: 0 }\n                }],\n                moneyChange: 0,\n                blockMovement: false\n            };\n        }\n        \n        // 检查玩家余额\n        if (player.financialStatus.cash < rentAmount) {\n            // 余额不足，可能需要抵押或破产\n            return {\n                success: false,\n                message: `余额不足！需要支付租金 ${rentAmount}，但只有 ${player.financialStatus.cash}`,\n                needUserInput: true,\n                events: [],\n                blockMovement: true\n            };\n        }\n        \n        // 支付租金\n        player.financialStatus.cash -= rentAmount;\n        player.financialStatus.expenses.rent += rentAmount;\n        player.statistics.totalRentPaid += rentAmount;\n        \n        // 地产拥有者收取租金\n        // TODO: 这里需要通过GameManager获取地产拥有者对象\n        // const owner = gameManager.getPlayer(this._propertyData.ownerId!);\n        // owner.financialStatus.cash += rentAmount;\n        // owner.financialStatus.income.rent += rentAmount;\n        // owner.statistics.totalRentCollected += rentAmount;\n        \n        const events = [{\n            eventId: `rent_payment_${Date.now()}`,\n            type: GameEventType.RENT_PAYMENT,\n            timestamp: Date.now(),\n            turnNumber: 0,\n            actorPlayerId: player.id,\n            targetPlayerId: this._propertyData.ownerId!,\n            affectedTileId: this.getTileData()?.id,\n            parameters: {\n                amount: rentAmount,\n                propertyName: this.tileName,\n                buildingLevel: this._propertyData.buildingLevel\n            },\n            description: `${player.nickname} 向 ${this.getOwnerName()} 支付租金 ${rentAmount}`,\n            result: { tenantBalance: player.financialStatus.cash }\n        }];\n        \n        return {\n            success: true,\n            message: `支付租金 ${rentAmount} 给 ${this.getOwnerName()}`,\n            events: events,\n            moneyChange: -rentAmount,\n            blockMovement: false\n        };\n    }\n    \n    /**\n     * 处理购买选项\n     * @param player 要购买的玩家\n     */\n    private async handlePurchaseOption(player: PlayerData): Promise<TileInteractionResult> {\n        if (!this._propertyData) {\n            return { success: false, message: '地产数据错误', events: [] };\n        }\n        \n        // 这里应该弹出购买确认对话框，让玩家选择是否购买\n        // 为了MVP简化，我们假设玩家总是选择购买（如果有钱的话）\n        \n        if (player.financialStatus.cash < this.purchasePrice) {\n            return {\n                success: false,\n                message: `资金不足！需要 ${this.purchasePrice}，但只有 ${player.financialStatus.cash}`,\n                events: [],\n                blockMovement: false\n            };\n        }\n        \n        // 执行购买\n        return await this.purchaseProperty(player);\n    }\n    \n    /**\n     * 处理地产拥有者选项\n     * @param player 地产拥有者\n     */\n    private async handleOwnerOptions(player: PlayerData): Promise<TileInteractionResult> {\n        // 地产拥有者停留在自己的地产上\n        // 可以选择建设、出售建筑等\n        \n        const options = this.getInteractionOptions(player);\n        \n        const availableActions: string[] = [];\n        if (options.canBuild) availableActions.push('建设');\n        if (options.canSell) availableActions.push('出售建筑');\n        if (options.canMortgage) availableActions.push('抵押');\n        \n        return {\n            success: true,\n            message: `这是你的地产！可用操作: ${availableActions.join(', ')}`,\n            needUserInput: availableActions.length > 0,\n            events: [],\n            blockMovement: false\n        };\n    }\n    \n    // ========================= 地产操作方法 =========================\n    \n    /**\n     * 购买地产\n     * @param player 购买者\n     */\n    public async purchaseProperty(player: PlayerData): Promise<TileInteractionResult> {\n        if (!this._propertyData || this._propertyData.ownerId !== null) {\n            return { success: false, message: '地产不可购买', events: [] };\n        }\n        \n        if (player.financialStatus.cash < this.purchasePrice) {\n            return { success: false, message: '资金不足', events: [] };\n        }\n        \n        // 扣除购买费用\n        player.financialStatus.cash -= this.purchasePrice;\n        player.financialStatus.expenses.property += this.purchasePrice;\n        player.statistics.propertiesPurchased++;\n        \n        // 设置地产拥有者\n        this._propertyData.ownerId = player.id;\n        player.ownedPropertyIds.push(this.getTileData()!.id);\n        \n        // 更新地产价值\n        player.financialStatus.propertyValue += this.purchasePrice;\n        \n        // 更新UI\n        this.updatePropertyUI();\n        \n        const events = [{\n            eventId: `property_purchase_${Date.now()}`,\n            type: GameEventType.PROPERTY_PURCHASE,\n            timestamp: Date.now(),\n            turnNumber: 0,\n            actorPlayerId: player.id,\n            affectedTileId: this.getTileData()?.id,\n            parameters: {\n                propertyName: this.tileName,\n                price: this.purchasePrice,\n                propertyGroup: this._propertyData.group\n            },\n            description: `${player.nickname} 购买了 ${this.tileName}`,\n            result: { newBalance: player.financialStatus.cash }\n        }];\n        \n        console.log(`[PropertyTile] 玩家 ${player.nickname} 购买了地产 ${this.tileName}`);\n        \n        return {\n            success: true,\n            message: `成功购买 ${this.tileName}！花费 ${this.purchasePrice}`,\n            events: events,\n            moneyChange: -this.purchasePrice,\n            blockMovement: false\n        };\n    }\n    \n    /**\n     * 建设建筑\n     * @param player 建设者（必须是地产拥有者）\n     * @param buildingType 建筑类型\n     */\n    public async buildBuilding(player: PlayerData, buildingType: BuildingType = BuildingType.HOUSE_1): Promise<TileInteractionResult> {\n        if (!this._propertyData || this._propertyData.ownerId !== player.id) {\n            return { success: false, message: '只有地产拥有者才能建设', events: [] };\n        }\n        \n        if (this._propertyData.isMortgaged) {\n            return { success: false, message: '抵押中的地产不能建设', events: [] };\n        }\n        \n        if (!this.canBuildMore()) {\n            return { success: false, message: '无法再建设更多建筑', events: [] };\n        }\n        \n        const buildCost = this.getBuildCost(buildingType);\n        if (player.financialStatus.cash < buildCost) {\n            return { success: false, message: `资金不足，需要 ${buildCost}`, events: [] };\n        }\n        \n        // 扣除建设费用\n        player.financialStatus.cash -= buildCost;\n        player.financialStatus.expenses.building += buildCost;\n        player.statistics.buildingsConstructed++;\n        \n        // 升级建筑等级\n        this._propertyData.buildingLevel++;\n        \n        // 更新建筑价值\n        player.financialStatus.buildingValue += buildCost;\n        \n        // 更新显示\n        this.updateBuildingDisplay();\n        this.updatePropertyUI();\n        \n        const events = [{\n            eventId: `building_construction_${Date.now()}`,\n            type: GameEventType.BUILDING_CONSTRUCTION,\n            timestamp: Date.now(),\n            turnNumber: 0,\n            actorPlayerId: player.id,\n            affectedTileId: this.getTileData()?.id,\n            parameters: {\n                propertyName: this.tileName,\n                buildingType: BuildingType[buildingType],\n                buildCost: buildCost,\n                newLevel: this._propertyData.buildingLevel\n            },\n            description: `${player.nickname} 在 ${this.tileName} 建设了 ${BuildingType[buildingType]}`,\n            result: { newBalance: player.financialStatus.cash }\n        }];\n        \n        console.log(`[PropertyTile] 玩家 ${player.nickname} 在 ${this.tileName} 建设了建筑`);\n        \n        return {\n            success: true,\n            message: `成功建设 ${BuildingType[buildingType]}！花费 ${buildCost}`,\n            events: events,\n            moneyChange: -buildCost,\n            blockMovement: false\n        };\n    }\n    \n    /**\n     * 抵押地产\n     * @param player 地产拥有者\n     */\n    public async mortgageProperty(player: PlayerData): Promise<TileInteractionResult> {\n        if (!this._propertyData || this._propertyData.ownerId !== player.id) {\n            return { success: false, message: '只有地产拥有者才能抵押', events: [] };\n        }\n        \n        if (this._propertyData.isMortgaged) {\n            return { success: false, message: '地产已经被抵押', events: [] };\n        }\n        \n        if (this._propertyData.buildingLevel > 0) {\n            return { success: false, message: '有建筑的地产无法抵押，请先出售建筑', events: [] };\n        }\n        \n        // 获得抵押金\n        player.financialStatus.cash += this.mortgageValue;\n        this._propertyData.isMortgaged = true;\n        \n        // 更新UI\n        this.updatePropertyUI();\n        \n        return {\n            success: true,\n            message: `${this.tileName} 已抵押，获得 ${this.mortgageValue}`,\n            events: [],\n            moneyChange: this.mortgageValue,\n            blockMovement: false\n        };\n    }\n    \n    // ========================= 计算和工具方法 =========================\n    \n    /**\n     * 计算当前租金\n     */\n    private calculateCurrentRent(): number {\n        if (!this._propertyData || this._propertyData.isMortgaged) {\n            return 0;\n        }\n        \n        const baseRent = this._rentLevels[this._propertyData.buildingLevel] || this.baseRent;\n        \n        // TODO: 检查垄断加成\n        // 如果玩家拥有同色组的所有地产，租金加倍\n        const hasMonopoly = this.checkMonopoly();\n        \n        return hasMonopoly && this._propertyData.buildingLevel === 0 ? baseRent * 2 : baseRent;\n    }\n    \n    /**\n     * 检查是否形成垄断\n     */\n    private checkMonopoly(): boolean {\n        // TODO: 这里需要通过GameManager检查同色组的其他地产\n        // 简化实现：假设没有垄断\n        return false;\n    }\n    \n    /**\n     * 检查是否可以建设更多建筑\n     */\n    private canBuildMore(): boolean {\n        return this._propertyData !== null && \n               this._propertyData.buildingLevel < 5 && // 最大5级（酒店）\n               !this._propertyData.isMortgaged;\n    }\n    \n    /**\n     * 获取建设费用\n     */\n    private getBuildCost(buildingType: BuildingType): number {\n        switch (buildingType) {\n            case BuildingType.HOTEL:\n                return this.hotelCost;\n            default:\n                return this.houseCost;\n        }\n    }\n    \n    /**\n     * 获取地产拥有者名称\n     */\n    private getOwnerName(): string {\n        if (!this._propertyData || !this._propertyData.ownerId) {\n            return '无主';\n        }\n        \n        // TODO: 通过GameManager获取玩家昵称\n        return `玩家${this._propertyData.ownerId}`;\n    }\n    \n    /**\n     * 消耗免租状态\n     */\n    private consumeFreeRentStatus(player: PlayerData): void {\n        const freeRentEffect = player.statusEffects.find(effect => \n            effect.type === 'free_rent' && effect.remainingTurns !== 0\n        );\n        \n        if (freeRentEffect) {\n            if (freeRentEffect.remainingTurns > 0) {\n                freeRentEffect.remainingTurns--;\n            }\n            \n            // 如果是一次性效果，直接移除\n            if (freeRentEffect.remainingTurns === 0) {\n                const index = player.statusEffects.indexOf(freeRentEffect);\n                if (index !== -1) {\n                    player.statusEffects.splice(index, 1);\n                }\n            }\n        }\n    }\n    \n    // ========================= UI更新方法 =========================\n    \n    /**\n     * 更新地产UI显示\n     */\n    private updatePropertyUI(): void {\n        // 更新价格标签\n        if (this.priceLabel) {\n            if (this._propertyData?.ownerId) {\n                this.priceLabel.string = this._propertyData.isMortgaged ? '抵押' : '已售';\n            } else {\n                this.priceLabel.string = `$${this.purchasePrice}`;\n            }\n        }\n        \n        // 更新拥有者标签\n        if (this.ownerLabel) {\n            this.ownerLabel.string = this.getOwnerName();\n        }\n        \n        // 更新地块颜色\n        this.updateTileColor();\n    }\n    \n    /**\n     * 更新地块颜色\n     */\n    private updateTileColor(): void {\n        if (!this._propertyData) {\n            return;\n        }\n        \n        let color = this.baseColor.clone();\n        \n        if (this._propertyData.ownerId) {\n            // 已被购买的地产\n            if (this._propertyData.isMortgaged) {\n                // 被抵押：灰色\n                color = new Color(100, 100, 100, 255);\n            } else {\n                // 正常拥有：使用拥有者的颜色\n                // TODO: 从GameManager获取玩家颜色\n                color = new Color(150, 200, 150, 255); // 临时绿色\n            }\n        }\n        \n        // 应用颜色\n        this._renderState.baseColor = color;\n        this.updateVisualAppearance();\n    }\n    \n    /**\n     * 更新建筑显示\n     */\n    private updateBuildingDisplay(): void {\n        if (!this.showBuildings || !this.buildingsContainer || !this._propertyData) {\n            return;\n        }\n        \n        // 清除现有建筑\n        this._buildingNodes.forEach(node => {\n            if (node && node.isValid) {\n                node.destroy();\n            }\n        });\n        this._buildingNodes = [];\n        \n        // 根据建筑等级创建新建筑\n        this.createBuildingModels(this._propertyData.buildingLevel);\n    }\n    \n    /**\n     * 创建建筑模型\n     * @param level 建筑等级\n     */\n    private createBuildingModels(level: number): void {\n        // TODO: 根据建筑等级创建3D模型\n        // 这里需要使用Cocos Creator的3D模型系统\n        \n        console.log(`[PropertyTile] 创建建筑模型，等级: ${level}`);\n        \n        // 实现提示：\n        // 1. 根据等级决定建筑类型（1-4级房屋，5级酒店）\n        // 2. 实例化对应的预制件\n        // 3. 设置位置和缩放\n        // 4. 添加到buildingsContainer\n        // 5. 保存到_buildingNodes数组\n    }\n    \n    // ========================= 公共方法 =========================\n    \n    /**\n     * 获取地产数据\n     */\n    public getPropertyData(): PropertyData | null {\n        return this._propertyData;\n    }\n    \n    /**\n     * 检查是否被指定玩家拥有\n     */\n    public isOwnedBy(playerId: string): boolean {\n        return this._propertyData?.ownerId === playerId;\n    }\n    \n    /**\n     * 检查是否无主\n     */\n    public isUnowned(): boolean {\n        return this._propertyData?.ownerId === null;\n    }\n    \n    /**\n     * 检查是否被抵押\n     */\n    public isMortgaged(): boolean {\n        return this._propertyData?.isMortgaged || false;\n    }\n    \n    /**\n     * 获取当前租金（用于UI显示）\n     */\n    public getCurrentRent(): number {\n        return this.calculateCurrentRent();\n    }\n    \n    /**\n     * 获取建筑等级\n     */\n    public getBuildingLevel(): number {\n        return this._propertyData?.buildingLevel || 0;\n    }\n    \n    /**\n     * 获取地产详细信息\n     */\n    public getPropertyInfo(): {\n        name: string;\n        price: number;\n        owner: string;\n        buildingLevel: number;\n        currentRent: number;\n        isMortgaged: boolean;\n        canPurchase: boolean;\n    } {\n        return {\n            name: this.tileName,\n            price: this.purchasePrice,\n            owner: this.getOwnerName(),\n            buildingLevel: this.getBuildingLevel(),\n            currentRent: this.getCurrentRent(),\n            isMortgaged: this.isMortgaged(),\n            canPurchase: this.isUnowned()\n        };\n    }\n}