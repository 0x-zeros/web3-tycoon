/**
 * 遥控骰子卡片
 * 
 * 允许玩家控制下次掷骰子的结果，可以指定1-6中的任意点数
 * 是最基础也是最实用的卡片之一，适合战术性使用
 * 
 * @author Web3 Tycoon Team
 * @version 1.0.0
 */

import { _decorator, Component } from 'cc';
import { Card, CardUseContext } from '../Card';
import { 
    CardType, 
    CardUsageTiming, 
    CardTargetType,
    CardUseResult,
    CardEffectType
} from '../../map/types/CardTypes';
import { GameEventType } from '../../map/types/GameTypes';

const { ccclass, property } = _decorator;

/**
 * 遥控骰子卡片实现类
 * 提供骰子点数控制功能
 */
@ccclass('DiceControlCard')
export class DiceControlCard extends Card {
    
    // ========================= 编辑器属性 =========================
    
    @property({ displayName: \"默认骰子点数\", range: [1, 6], tooltip: \"如果不选择，使用的默认点数\" })
    public defaultDiceValue: number = 6;\n    \n    @property({ displayName: \"允许重复使用\", tooltip: \"是否允许在同一回合内多次使用\" })\n    public allowMultipleUse: boolean = false;\n    \n    @property({ displayName: \"显示选择界面\", tooltip: \"使用时是否弹出点数选择界面\" })\n    public showSelectionUI: boolean = true;\n    \n    // ========================= 私有属性 =========================\n    \n    /** 选择的骰子点数 */\n    private _selectedValue: number = 6;\n    \n    /** 本回合已使用次数 */\n    private _usedThisTurn: number = 0;\n    \n    // ========================= 抽象属性实现 =========================\n    \n    public get cardType(): CardType {\n        return CardType.DICE_CONTROL;\n    }\n    \n    public get usageTiming(): CardUsageTiming {\n        return CardUsageTiming.BEFORE_DICE;\n    }\n    \n    public get targetType(): CardTargetType {\n        return CardTargetType.NONE; // 不需要选择目标\n    }\n    \n    // ========================= 核心方法实现 =========================\n    \n    /**\n     * 检查是否可以使用\n     * @param context 使用上下文\n     */\n    protected checkUsability(context: CardUseContext): any {\n        const baseCheck = super.checkUsability(context);\n        \n        if (!baseCheck.canUse) {\n            return baseCheck;\n        }\n        \n        // 检查是否已在本回合使用过（如果不允许重复使用）\n        if (!this.allowMultipleUse && this._usedThisTurn > 0) {\n            return {\n                canUse: false,\n                reasons: ['本回合已使用过遥控骰子'],\n                requiredTargetType: this.targetType\n            };\n        }\n        \n        // TODO: 检查是否在正确的游戏阶段使用\n        // 遥控骰子只能在掷骰子前使用\n        \n        return {\n            canUse: true,\n            reasons: [],\n            requiredTargetType: this.targetType\n        };\n    }\n    \n    /**\n     * 执行卡片效果\n     * @param context 使用上下文\n     */\n    protected async executeCardEffect(context: CardUseContext): Promise<CardUseResult> {\n        console.log(`[DiceControlCard] 执行遥控骰子效果`);\n        \n        // 获取选择的点数\n        let selectedValue = this._selectedValue;\n        \n        // 如果提供了参数，使用参数中的值\n        if (context.parameters && context.parameters.diceValue) {\n            selectedValue = Math.max(1, Math.min(6, context.parameters.diceValue));\n        }\n        \n        // 如果需要显示选择界面\n        if (this.showSelectionUI && !context.parameters?.diceValue) {\n            selectedValue = await this.showDiceSelectionUI();\n        }\n        \n        // 验证选择的值\n        if (selectedValue < 1 || selectedValue > 6) {\n            return {\n                success: false,\n                message: '无效的骰子点数',\n                errorCode: 'INVALID_DICE_VALUE',\n                appliedEffects: [],\n                affectedPlayerIds: [],\n                affectedTileIds: []\n            };\n        }\n        \n        // 应用骰子控制效果\n        const effectResult = this.applyDiceControlEffect(context.player, selectedValue);\n        \n        // 增加使用计数\n        this._usedThisTurn++;\n        \n        // 创建使用结果\n        const result: CardUseResult = {\n            success: true,\n            message: `遥控骰子设置成功！下次掷骰结果将是 ${selectedValue} 点`,\n            appliedEffects: [{\n                type: CardEffectType.CONTROL_DICE,\n                target: context.player.id,\n                params: { controlledValue: selectedValue },\n                result: effectResult\n            }],\n            affectedPlayerIds: [context.player.id],\n            affectedTileIds: [],\n            extendedData: {\n                controlledDiceValue: selectedValue,\n                cardType: this.cardType\n            }\n        };\n        \n        // 播放特效\n        await this.playDiceControlEffect(selectedValue);\n        \n        return result;\n    }\n    \n    // ========================= 特殊效果方法 =========================\n    \n    /**\n     * 应用骰子控制效果\n     * @param player 玩家\n     * @param diceValue 控制的点数\n     */\n    private applyDiceControlEffect(player: any, diceValue: number): any {\n        // 给玩家添加骰子控制状态效果\n        const controlEffect = {\n            effectId: `dice_control_${Date.now()}`,\n            type: 'controlled_dice',\n            name: '遥控骰子',\n            description: `下次掷骰结果将是 ${diceValue} 点`,\n            remainingTurns: 1, // 只影响下一次掷骰\n            parameters: {\n                controlledValue: diceValue,\n                cardSource: this.cardType\n            },\n            source: 'dice_control_card',\n            iconPath: 'icons/dice_control'\n        };\n        \n        // 添加到玩家状态效果列表\n        if (player.statusEffects) {\n            // 移除之前的骰子控制效果（如果有）\n            const existingIndex = player.statusEffects.findIndex((effect: any) => \n                effect.type === 'controlled_dice'\n            );\n            \n            if (existingIndex !== -1) {\n                player.statusEffects.splice(existingIndex, 1);\n            }\n            \n            player.statusEffects.push(controlEffect);\n        }\n        \n        console.log(`[DiceControlCard] 玩家 ${player.nickname || player.id} 获得骰子控制效果: ${diceValue}`);\n        \n        return {\n            effectApplied: true,\n            controlledValue: diceValue,\n            effectDuration: 1\n        };\n    }\n    \n    /**\n     * 显示骰子点数选择界面\n     */\n    private async showDiceSelectionUI(): Promise<number> {\n        // TODO: 实现骰子点数选择UI\n        // 这里应该弹出一个对话框让玩家选择1-6的点数\n        \n        console.log('[DiceControlCard] 显示骰子点数选择界面（待实现）');\n        \n        // 临时实现：返回默认值\n        return new Promise((resolve) => {\n            // 模拟UI选择过程\n            this.scheduleOnce(() => {\n                resolve(this.defaultDiceValue);\n            }, 0.5);\n        });\n        \n        // 实际实现应该类似：\n        // 1. 创建选择对话框\n        // 2. 显示1-6的按钮\n        // 3. 等待玩家选择\n        // 4. 返回选择的值\n    }\n    \n    /**\n     * 播放骰子控制特效\n     * @param diceValue 控制的点数\n     */\n    private async playDiceControlEffect(diceValue: number): Promise<void> {\n        console.log(`[DiceControlCard] 播放骰子控制特效: ${diceValue}`);\n        \n        // TODO: 实现骰子控制特效\n        // 可以包括：\n        // 1. 骰子发光效果\n        // 2. 数字显示动画\n        // 3. 控制音效\n        // 4. 粒子特效\n        \n        return new Promise((resolve) => {\n            this.scheduleOnce(() => {\n                resolve();\n            }, 1.0);\n        });\n    }\n    \n    // ========================= 回调方法 =========================\n    \n    /**\n     * 卡片初始化回调\n     */\n    protected onCardInitialized(cardData: any, cardInstance: any): void {\n        super.onCardInitialized(cardData, cardInstance);\n        \n        // 重置回合使用计数\n        this._usedThisTurn = 0;\n        this._selectedValue = this.defaultDiceValue;\n        \n        console.log(`[DiceControlCard] 遥控骰子卡片初始化完成`);\n    }\n    \n    // ========================= 公共方法 =========================\n    \n    /**\n     * 设置骰子点数\n     * @param value 1-6的点数\n     */\n    public setDiceValue(value: number): void {\n        if (value >= 1 && value <= 6) {\n            this._selectedValue = value;\n            console.log(`[DiceControlCard] 骰子点数设置为: ${value}`);\n        } else {\n            console.warn(`[DiceControlCard] 无效的骰子点数: ${value}`);\n        }\n    }\n    \n    /**\n     * 获取当前设置的骰子点数\n     */\n    public getDiceValue(): number {\n        return this._selectedValue;\n    }\n    \n    /**\n     * 重置回合计数（在新回合开始时调用）\n     */\n    public resetTurnCounter(): void {\n        this._usedThisTurn = 0;\n        console.log('[DiceControlCard] 回合使用计数已重置');\n    }\n    \n    /**\n     * 检查本回合是否已使用\n     */\n    public isUsedThisTurn(): boolean {\n        return this._usedThisTurn > 0;\n    }\n    \n    /**\n     * 获取本回合使用次数\n     */\n    public getUsageCountThisTurn(): number {\n        return this._usedThisTurn;\n    }\n    \n    /**\n     * 检查指定的骰子点数是否有效\n     * @param value 要检查的点数\n     */\n    public static isValidDiceValue(value: number): boolean {\n        return Number.isInteger(value) && value >= 1 && value <= 6;\n    }\n    \n    /**\n     * 获取卡片的详细使用说明\n     */\n    public getUsageInstructions(): string {\n        return `使用遥控骰子可以控制下次掷骰的结果。\\n` +\n               `- 可选择1-6中的任意点数\\n` +\n               `- 只影响下一次掷骰\\n` +\n               `- 在掷骰子前使用\\n` +\n               `${this.allowMultipleUse ? '- 每回合可多次使用' : '- 每回合只能使用一次'}`;\n    }\n}